// Generated by CoffeeScript 1.6.3
var mapsload;

mapsload = function(setLat, setLng, targetField) {
  var address, autocomplete, geocoder, image, infowindow, input, latlng, map, marker, myOptions, place, zooBoomafoo;
  marker = void 0;
  map = void 0;
  geocoder = void 0;
  input = void 0;
  autocomplete = void 0;
  infowindow = void 0;
  place = void 0;
  image = void 0;
  address = void 0;
  latlng = void 0;
  zooBoomafoo = void 0;
  latlng = new google.maps.LatLng(38.959330033499675, -95.26810996977234);
  zooBoomafoo = 12;
  if (setLat) {
    latlng = new google.maps.LatLng(parseFloat(setLat), parseFloat(setLng));
    zooBoomafoo = 17;
  }
  myOptions = {
    zoom: zooBoomafoo,
    center: latlng,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  geocoder = new google.maps.Geocoder();
  map = new google.maps.Map(document.getElementById("residence_map"), myOptions);
  input = document.getElementById("residence_address");
  autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo("bounds", map);
  infowindow = new google.maps.InfoWindow();
  marker = new google.maps.Marker({
    map: map,
    draggable: true
  });
  google.maps.event.addListener(marker, "drag", function() {
    geocoder.geocode({
      latLng: marker.getPosition()
    }, function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        if (results[0]) {
          jQuery("#map_address").val(results[0].formatted_address);
          return jQuery(targetField).val(marker.getPosition().lat() + "," + marker.getPosition().lng());
        }
      }
    });
    infowindow.close();
    return infowindow.setContent(null);
  });
  if (setLat) {
    marker.setPosition(new google.maps.LatLng(parseFloat(setLat), parseFloat(setLng)));
    marker.setMap(map);
  }
  return google.maps.event.addListener(autocomplete, "place_changed", function() {
    marker = null;
    marker = new google.maps.Marker({
      map: map,
      draggable: true
    });
    google.maps.event.addListener(marker, "drag", function() {
      geocoder.geocode({
        latLng: marker.getPosition()
      }, function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          if (results[0]) {
            jQuery("#map_address").val(results[0].formatted_address);
            return jQuery(targetField).val(marker.getPosition().lat() + "," + marker.getPosition().lng());
          }
        }
      });
      infowindow.close();
      return infowindow.setContent(null);
    });
    infowindow.close();
    input.className = "";
    place = autocomplete.getPlace();
    if (!place.geometry) {
      input.className = "notfound";
      return;
    }
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
    }
    address = "";
    jQuery(targetField).val(place.geometry.location.toString().slice(1, -1));
    if (place.address_components) {
      address = [place.address_components[0] && place.address_components[0].short_name || "", place.address_components[1] && place.address_components[1].short_name || "", place.address_components[2] && place.address_components[2].short_name || ""].join(" ");
    }
    marker.setPosition(place.geometry.location);
    infowindow.setContent("<div><strong>" + place.name + "</strong><br>" + address);
    geocoder.geocode({
      latLng: marker.getPosition()
    }, function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        if (results[0]) {
          jQuery("#map_address").val(results[0].formatted_address);
          return jQuery(targetField).val(marker.getPosition().lat() + "," + marker.getPosition().lng());
        }
      }
    });
    google.maps.event.addListener(marker, "click", function() {
      return infowindow.open(map, marker);
    });
    return marker.setMap(map);
  });
};

jQuery(document).ready(function($) {
  $(".custom_media_upload").click(function(e) {
    var clicked, custom_uploader;
    e.preventDefault();
    clicked = $(this);
    custom_uploader = wp.media({
      title: "Upload Media",
      button: {
        text: "Choose Media"
      },
      multiple: false
    }).on("select", function() {
      var attachment;
      attachment = custom_uploader.state().get("selection").first().toJSON();
      $(clicked).siblings(".custom_media_image").attr("src", attachment.url);
      $(clicked).siblings(".custom_media_url").val(attachment.url);
    }).open();
  });
});

jQuery(function($) {
  var elem;
  $("#media-items").bind("DOMNodeInserted", function() {
    return $("input[value=\"Insert into Post\"]").each(function() {
      return $(this).attr("value", "Use This Image");
    });
  });
  $(".custom_upload_image_button").click(function() {
    var formfield, preview;
    formfield = $(this).siblings(".custom_upload_image");
    preview = $(this).siblings(".custom_preview_image");
    tb_show("", "media-upload.php?type=image&TB_iframe=true");
    window.send_to_editor = function(html) {
      var classes, id, imgurl;
      imgurl = $("img", html).attr("src");
      classes = $("img", html).attr("class");
      id = classes.replace(/(.*?)wp-image-/, "");
      formfield.val(id);
      preview.attr("src", imgurl);
      return tb_remove();
    };
    return false;
  });
  $(".custom_clear_image_button").click(function() {
    var defaultImage;
    defaultImage = $(this).parent().siblings(".custom_default_image").text();
    $(this).parent().siblings(".custom_upload_image").val("");
    $(this).parent().siblings(".custom_preview_image").attr("src", defaultImage);
    return false;
  });
  $(".repeatable-add").click(function() {
    var field, fieldLocation;
    field = $(this).closest("td").find(".custom_repeatable li:last").clone(true);
    fieldLocation = $(this).closest("td").find(".custom_repeatable li:last");
    $("textarea", field).val("").attr("name", function(index, name) {
      return name.replace(/(\d+)/, function(fullMatch, n) {
        return Number(n) + 1;
      });
    });
    field.insertAfter(fieldLocation, $(this).closest("td"));
    return false;
  });
  $(".repeatable-remove").click(function() {
    $(this).parent().remove();
    return false;
  });
  $(".custom_repeatable").sortable({
    opacity: 0.6,
    revert: true,
    cursor: "move",
    handle: ".sort"
  });
  $(".repeatable-adds").click(function() {
    var field, fieldLocation;
    field = $(this).closest("td").find(".custom_repeatables li:last").clone(true);
    fieldLocation = $(this).closest("td").find(".custom_repeatables li:last");
    $("input", field).val("").attr("name", function(index, name) {
      return name.replace(/(\d+)/, function(fullMatch, n) {
        return Number(n) + 1;
      });
    });
    field.insertAfter(fieldLocation, $(this).closest("td"));
    return false;
  });
  $(".repeatable-removes").click(function() {
    $(this).parent().remove();
    return false;
  });
  $(".custom_repeatables").sortable({
    opacity: 0.6,
    revert: true,
    cursor: "move",
    handle: ".sort"
  });
  $('.preview-icons').click(function(){
  	var list = $(this).siblings('.list-icons');
  	$('.list-icons').not(list).removeClass('active');
  	$(list).toggleClass('active');
  	$(list).children('li').click(function(){
      var listValue = $(this).attr("data-value");
      $(list).siblings(".hidden-icons").attr("value", listValue);
      $(this).attr("data-selected", "selected");
      var previewData = '<i class="icon-' + listValue + '"></i>&nbsp;' + listValue + '&nbsp;<i class="icon-angle-down"></i>';
      $(list).siblings(".preview-icons").html(previewData);
      $(this).siblings().removeClass("active");
      return $(list).removeClass('active');
  	});
  });
  elem = document.createElement("input");
  elem.setAttribute("type", "date");
  if (elem.type === "text") {
    return $('input[type="date"]').datepicker();
  }
});
